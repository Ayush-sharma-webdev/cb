<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ChatBlink®️ | Chatroom Chat PRIVATELY and SECURLY</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
    <style>
      @font-face {
        font-family: comforta;
        src: url("/css/Fonts/Comfortaa-Regular.ttf");
      }

      #custom-alert {
        font-family: "Comfortaa", sans-serif;
        opacity: 0;
      }

      #custom-alert.show {
        opacity: 1;
      }

      #videos {
        display: grid;
        grid-template-columns: 1fr;
        height: 100vh;
        overflow: hidden;
      }

      .video-player {
        background-color: black;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .smallFrame {
        position: fixed;
        bottom: 100px;
        right: 20px;
        height: 170px;
        width: 300px;
        border-radius: 6px;
        z-index: 10;
      }

      #controls {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 1em;
      }

      .control-container {
        background-color: #6df966;
        padding: 20px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
      }

      .control-container svg {
        height: 30px;
        width: 30px;
      }

      #leave-btn {
        background-color: rgb(255, 80, 80, 1);
      }

      @media screen and (max-width: 600px) {
        .smallFrame {
          height: 80px;
          width: 120px;
        }

        .control-container img {
          height: 20px;
          width: 20px;
        }
      }
    </style>
  </head>
  <body class="flex flex-col h-dvh bg-[#0A0B0E]">
    <header
      class="bg-[#15181E] shadow-white p-4 flex justify-between items-center"
    >
      <h1 class="text-3xl font-bold text-white font-[comforta]">Chat</h1>
      <div>
        <button
          id="video-call-btn"
          class="bg-blue-500 font-semibold text-center font-[comforta] text-white py-2 px-4 rounded-3xl hover:bg-blue-700 duration-700"
        >
          VideoCall
        </button>
      </div>
    </header>
    <div class="fixed videoblock hidden z-[222] w-full h-svh">
      <div id="videos">
        <video
          class="video-player"
          id="localVideo"
          autoplay
          muted
          playsinline
        ></video>
        <video
          class="video-player"
          id="remoteVideo"
          autoplay
          muted
          playsinline
        ></video>
      </div>
      <div id="controls">
        <div class="control-container" id="cameraButton">
          <svg
            width="21"
            height="14"
            viewBox="0 0 21 14"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
              fill="white"
            />
          </svg>
        </div>

        <div class="control-container" id="hangup">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M0 0h24v24H0z" fill="red" />
            <path
              d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z"
            />
          </svg>
        </div>
        <div class="control-container" id="micButton">
          <svg
            width="20"
            height="20"
            viewBox="0 0 14 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
              fill="white"
            />
          </svg>
        </div>
      </div>
    </div>
    <div
      id="incoming-call"
      class="fixed z-[222] w-full h-dvh hidden bg-gray-800 bg-opacity-75 flex items-center justify-center"
    >
      <div class="bg-[#15181E] p-8 rounded-md text-center">
        <p class="mb-4 text-white font-[comforta]">Incoming Call....</p>
        <button
          id="accept-call"
          class="bg-green-500 text-white font-[comforta] py-2 px-4 rounded-2xl"
        >
          Accept
        </button>
        <button
          id="reject-call"
          class="bg-red-500 text-white font-[comforta] py-2 px-4 rounded-2xl ml-2"
        >
          Reject
        </button>
      </div>
    </div>
    <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
      <div
        class="text-[#B5B7BD] absolute font-[comforta] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody"
      >
        Bhagwaan kasam koi nahi hai yaha, ruko shaayad koiaajaye.
      </div>
    </main>
    <form id="chatform" class="bg-[#15181E] p-6 flex">
      <input type="hidden" id="userid" value="" />
      <input
        type="text"
        id="messagebox"
        class="flex-1 border border-[#445a99] rounded-md text-white font-[comforta] px-3 py-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        placeholder="Type a message"
      />
      <button
        type="submit"
        class="ml-2 bg-indigo-600 text-white py-2 px-4 font-[comforta] rounded-md hover:bg-indigo-700"
      >
        Send
      </button>
    </form>
    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>

    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>

    <script>
      const socket = io();
      const chatbox = document.querySelector("#chatform");
      const messagebox = document.querySelector("#messagebox");
      const messagecontainer = document.querySelector("#message-container");
      let room;
      socket.emit("joinroom");

      socket.on("joined", function (roomname) {
        room = roomname;
        document.querySelector(".nobody").classList.add("hidden");
      });

      socket.on("message", function (message) {
        receiveMessage(message);
      });

      chatbox.addEventListener("submit", (event) => {
        event.preventDefault();
        socket.emit("message", { room: room, message: messagebox.value });
        attachMessage(messagebox.value);
        messagebox.value = "";
      });

      function attachMessage(message) {
        const userMessageContainer = document.createElement("div");
        userMessageContainer.classList.add("flex", "my-2", "justify-end");

        const userMessageDiv = document.createElement("div");
        userMessageDiv.classList.add(
          "bg-blue-500",
          "text-white",
          "p-3",
          "rounded-lg",
          "max-w-xs",
          "font-[comforta]"
        );

        const userMessageText = document.createElement("p");
        userMessageText.textContent = message;

        userMessageDiv.appendChild(userMessageText);

        userMessageContainer.appendChild(userMessageDiv);

        document
          .getElementById("message-container")
          .appendChild(userMessageContainer);

        document.querySelector("#message-container").scrollTop =
          document.querySelector("#message-container").scrollHeight;
      }

      function receiveMessage(message) {
        const messageContainer = document.createElement("div");
        messageContainer.classList.add("flex", "my-2", "justify-start");

        const messageDiv = document.createElement("div");
        messageDiv.classList.add(
          "bg-purple-500",
          "text-white",
          "p-3",
          "rounded-lg",
          "max-w-xs",
          "font-[comforta]"
        );

        const messageText = document.createElement("p");
        messageText.textContent = message;

        messageDiv.appendChild(messageText);

        messageContainer.appendChild(messageDiv);

        document
          .getElementById("message-container")
          .appendChild(messageContainer);
        document.querySelector("#message-container").scrollTop =
          document.querySelector("#message-container").scrollHeight;
      }

      let localStream;
      let remoteStream;
      let peerConnection;
      let inCall = false;

      const rtcSettings = {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      };

      const initialize = async () => {
        socket.on("signalingMessage", handleSignalingMessage);

        try {
          localStream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true,
          });
          document.querySelector("#localVideo").srcObject = localStream;
          document.querySelector("#localVideo").style.display = "block";

          initiateOffer();

          inCall = true;
        } catch (err) {
          console.log("Rejected by browser" + err);
        }
      };

      const initiateOffer = async () => {
        await createPeerConnection();
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({
              type: "offer",
              offer,
            }),
          });
        } catch (err) {
          console.log("error in creating offer" + err);
        }
      };

      const createPeerConnection = () => {
        peerConnection = new RTCPeerConnection(rtcSettings);

        remoteStream = new MediaStream();

        document.querySelector("#remoteVideo").srcObject = remoteStream;
        document.querySelector("#remoteVideo").style.display = "block";
        document.querySelector("#localVideo").classList.add("smallFrame");

        localStream.getTracks().forEach((track) => {
          peerConnection.addTrack(track, localStream);
        });

        peerConnection.ontrack = (event) => {
          event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack(track);
          });
        };

        peerConnection.onicecandidate = (event) => {
          if (event.candidate) {
            console.log("Sending Ice Candidates");

            socket.emit("signalingMessage", {
              room,
              message: JSON.stringify({
                type: "candidate",
                candidate: event.candidate,
              }),
            });
          }
        };

        peerConnection.onconnectionstatechange = () => {
          console.log(
            "connection state change hui ",
            peerConnection.connectionState
          );
        };
      };

      const handleSignalingMessage = async (message) => {
        const { type, offer, answer, candidate } = JSON.parse(message);
        if (type === "offer") handleOffer(offer);
        if (type === "answer") handleAnswer(answer);
        if (type === "candidate" && peerConnection) {
          try {
            await peerConnection.addIceCandidate(candidate);
          } catch (error) {
            console.log(error);
          }
        }
        if (type === "hangup") {
          hangup();
        }
      };

      const handleOffer = async (offer) => {
        await createPeerConnection();
        try {
          await peerConnection.setRemoteDescription(offer);
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "answer", answer }),
          });
          inCall = true;
        } catch (error) {
          console.log("failed to handle offer");
        }
      };

      const handleAnswer = async (answer) => {
        try {
          await peerConnection.setRemoteDescription(answer);
        } catch (error) {
          console.log("failed to handle answer");
        }
      };

      document
        .querySelector("#video-call-btn")
        .addEventListener("click", function () {
          socket.emit("startVideoCall", { room });
        });

      socket.on("incomingCall", function () {
        console.log("hey");
        document.querySelector("#incoming-call").classList.remove("hidden");
      });

      socket.on("callAccepted", function () {
        initialize();
        document.querySelector(".videoblock").classList.remove("hidden");
      });

      document
        .querySelector("#accept-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          initialize();
          document.querySelector(".videoblock").classList.remove("hidden");
          socket.emit("acceptCall", { room });
        });

      document
        .querySelector("#reject-call")
        .addEventListener("click", function () {
          document.querySelector("#incoming-call").classList.add("hidden");
          socket.emit("rejectCall", { room });
        });

      socket.on("callRejected", function () {
        alert("Call rejected by other user");
      });

      document.querySelector("#hangup").addEventListener("click", function () {
        hangup();
      });

      function hangup() {
        if (peerConnection) {
          peerConnection.close();
          peerConnection = null;
          localStream.getTracks().forEach((track) => track.stop());

          document.querySelector(".videoblock").classList.add("hidden");
          socket.emit("signalingMessage", {
            room,
            message: JSON.stringify({ type: "hangup" }),
          });
          inCall = false;
        }
      }

      const logout = document.querySelector("a");
      logout.addEventListener("click", () => {
        alert("User logged out successfully.");
      });

      document.addEventListener("keyup", function (e) {
        if (e.key === "PrintScreen") {
          navigator.clipboard.writeText("");
          alert("Screenshot is disabled on this page.");
        }
      });

      window.addEventListener("contextmenu", function (e) {
        e.preventDefault();
      });

      document.onkeydown = function (e) {
        if (
          e.key === "F12" ||
          (e.ctrlKey && e.shiftKey && ["I", "J", "C"].includes(e.key)) ||
          (e.ctrlKey && e.key === "U")
        ) {
          return false;
        }
      };
    </script>
  </body>
</html>
